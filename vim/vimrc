call plug#begin('~/.vim/plugged')

" Utility
Plug 'scrooloose/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'yggdroot/indentline'
Plug 'mileszs/ack.vim'
Plug 'airblade/vim-gitgutter'
Plug 'ryanoasis/vim-devicons'

" Themes
Plug 'morhetz/gruvbox'
Plug 'haishanh/night-owl.vim'
Plug 'whatyouhide/vim-gotham'
Plug 'itchyny/lightline.vim'

" Languages
Plug 'fatih/vim-go'
Plug 'vim-python/python-syntax' "syntax highlighting

if has('nvim')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
            \ 'coc-json',
            \ 'coc-python']
endif

call plug#end()

" ---------------------------------------------------------------------
" KEY_BINDINGS
" ---------------------------------------------------------------------

" leader is space
let mapleader = "\<Space>""

" fast write
nnoremap <Leader>w<CR> :w<CR>

" fast close
nnoremap <Leader>q<CR> :q<CR>

" save and close
nnoremap <Leader>wq<CR> :wq<CR>

" format json
com! FormatJSON %!python -m json.tool<CR>

" remove highlight
"nnoremap <silent> <Leader><Leader><CR> :noh<CR>

" outdent in visual and normal mode
xnoremap <s-tab> <gv 										

" indent in visual and normal mode
xnoremap <tab> >gv 											

" switch buffer
nnoremap <silent> <tab> :bnext<cr>

" switch buffer
nnoremap <silent> <s-tab> :bprevious<CR>

" delete buffer
nnoremap <silent> <Leader>bd<CR> :bd<CR>

" disable dd register
nnoremap dd "_dd 											

" ---------------------------------------------------------------------
" COLOR_SCHEME
" ---------------------------------------------------------------------

" enable termguicolors
if (has("termguicolors"))
 set termguicolors
endif

" set colorscheme
colorscheme night-owl

" lightline match colorscheme
let g:lightline = { 'colorscheme': 'nightowl' }

" ---------------------------------------------------------------------
" GENERAL_CONFIG
" ---------------------------------------------------------------------

" system clipboard
set clipboard+=unnamed

" set utf-8 on write
set fileencoding=utf-8

" utf-8 encoding
set encoding=utf-8

" enable mouse support
set mouse=a

" vi compatibility off
set nocompatible

" don't continue comment on next line
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

" keep cursor in the middle when scrolling
set so=999

" ---------------------------------------------------------------------
" INDENTS
" ---------------------------------------------------------------------

" new lines inherit indent from previous line
set autoindent
" convert tabs to spaces
set expandtab
set smarttab
set smartindent
set shiftwidth=4                
set softtabstop=4
" indent using 4 spaces
set tabstop=4                   

" ---------------------------------------------------------------------
" SEARCH
" ---------------------------------------------------------------------
" enable search highlighting
set hlsearch

" ignore case when searching
set ignorecase

" incremental search that shows partial matches
set incsearch

" auto switch to case-sensitive when search contains uppercase letter
set smartcase

" ---------------------------------------------------------------------
" PERFORMANCE
" ---------------------------------------------------------------------

" limit the files searched for auto-completes
set complete-=i

" don't update screen during macros and script execution
set lazyredraw

" ---------------------------------------------------------------------
" UI
" ---------------------------------------------------------------------
set encoding=utf-8

" avoid wrapping in middle of word
set linebreak

" number of screen lines to keep above and below
set scrolloff=1

" number of screen columns to keep to the left and right of cursor
set sidescrolloff=1

syntax enable

""" wrap long lines
set wrap

" highlight cursor row
set cursorline

" font
set guifont=Hack\ Nerd\ Font:h14

" always display status bar
set laststatus=2

" enable line numbers and relative line numbers
set number
set relativenumber

" always show cursor position
set ruler

" create splits to the right and to the bottom
set splitbelow
set splitright

" set window title to current edited file
set title

" display command line's tab complete options as a menu
set wildmenu
set wildignore+=*.pyc,__pycache__/

" no backup files
set nobackup
set nowritebackup

" ---------------------------------------------------------------------
" TERMINAL
" ---------------------------------------------------------------------
" start terminal in insert mode
au BufEnter * if &buftype == 'terminal' | :startinsert | endif

" open terminal on ctrl+n
nnoremap <c-n> :call OpenTerminal()<CR>

" turn terminal to normal mode with escape
tnoremap <Esc> <C-\><C-n>

" ---------------------------------------------------------------------
" CODE_FOLDING
" ---------------------------------------------------------------------
" fold base on indentation levels
set foldmethod=syntax            

" disable folding by default
set nofoldenable

" ---------------------------------------------------------------------
" MISCELLANEOUS
" ---------------------------------------------------------------------
" reload on external changes
set autoread

" backspace fix osx
set backspace=indent,eol,start

" confirm unsaved changes before closing
set confirm

" delete comment characters when joining lines
set formatoptions+=j

" allow hidden buffers
set hidden

" increase undo limit
set history=1000

" ignore file's mode lines; use vimrc config instead
set nomodeline

" disable swap files
set noswapfile

" lower updatetime
set updatetime=300

" check for changes on CursorHold
au cursorhold * checktime

" ---------------------------------------------------------------------
" FUNCTIONS
" ---------------------------------------------------------------------
function! ToggleSyntax()
    if (exists("g:syntax_on"))
        syntax off
    else
        syntax enable
    endif
endfunction

function ToggleMouse()
    if &mouse == 'a'
        set mouse=
    else
        set mouse=a
    endif
endfunction

function! OpenTerminal()
  split term://fish
  resize 10
endfunction

" ---------------------------------------------------------------------
" COC
" ---------------------------------------------------------------------
set shortmess+=c
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" ---------------------------------------------------------------------
" LANGUAGE: GO
" ---------------------------------------------------------------------
let s:tlist_def_go_settings = 'go;g:enum;s:struct;u:union;t:type;' .
                           \ 'v:variable;f:function'
" ctags for go
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" ---------------------------------------------------------------------
" VIM-GO
" ---------------------------------------------------------------------
let g:go_def_mapping_enabled = 0
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"  " use goimports to auto insert import paths instead of gofmt
let g:go_fmt_autosave = 1   " disable gofmt on save

" ---------------------------------------------------------------------
" FZF
" ---------------------------------------------------------------------
nnoremap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}
if has("nvim")
  au TermOpen * tnoremap <Esc> <c-\><c-n>
  au FileType fzf tunmap <Esc>
endif

" ---------------------------------------------------------------------
" INDENTLINE
" ---------------------------------------------------------------------
let g:indentLine_enabled = 1
autocmd Filetype json let g:indentLine_enabled = 0

" ---------------------------------------------------------------------
" NERDTREE
" ---------------------------------------------------------------------
nnoremap <C-b> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', '__pycache__$']
let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1
" Automaticaly close nvim if NERDTree is only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ---------------------------------------------------------------------
" NERDCOMMENTER
" ---------------------------------------------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" ---------------------------------------------------------------------
" TAGBAR
" ---------------------------------------------------------------------
map <Leader>tt<CR> :TagbarToggle<CR>

" ---------------------------------------------------------------------
" VIM-PYTHON
" ---------------------------------------------------------------------
let g:python_highlight_all=1
